{"meta":{"title":"Loong","subtitle":"Nothing is impossible to a willing heart !","description":"This is Loong's blog","author":"Loong","url":"https://xiao-long.club","root":"/"},"pages":[{"title":"","text":"404","path":"404/index.html","date":"12-11","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"12-11","excerpt":""},{"title":"关于我","text":"hello 看到你了","path":"about/index.html","date":"06-12","excerpt":""},{"title":"分类","text":"","path":"categories/index.html","date":"06-12","excerpt":""},{"title":"标签","text":"","path":"tags/index.html","date":"06-12","excerpt":""},{"title":"message","text":"","path":"message/index.html","date":"12-13","excerpt":""}],"posts":[{"title":"JavaScript基础 - 对象","text":"JavaScript 中的数据类型 — string —- 字符串 — Number —- 数值 — Boolean —- 布尔值 — null —– 空值 — Undefined —- 未定义———— 以上五种数据类型属于基础数据类型，只要不是以上五种，全部都是对象。 Object 对象—— 对象属于一种复合的数据类型，在对象中可以保存多个不同数据类型的属性。 一 、对象的分类 内建对象 ： 在ES标准定义的对象，在任何的ES的实现中都可以使用 比如 ： Math String Number Boolean Function 宿主对象 ： 由 JavaScript 的运行环境提供的对象，目前来讲主要指又浏览器提供的对象 比如 ： Bom DOM 自定义对象 ： 由开发人员自己创建的对象。 二 、对象的基本操作2.1 创建对象及调用 使用 new 关键字调用的函数，是构造函数 construction ； – 构造函数是专门用来创建对象的函数 使用 typeof 检查一个对象时 ，返回 object 。 在对象中保存的值称之为属性 var obj = new Object( ); // 给 obj 添加属性 obj.name =&quot;孙悟空&quot;； obj.age =&quot;18&quot; //读取对象中的属性 console.log (obj.age) // 18 //修改对象中的属性 obj.age = &quot;20&quot; console.log (obj.age) // 20 //删除对象属性 delete obj.age console.log (obj.age) // undefined 2.1.1 向对象中添加属性 —— 语法如下 ：语法 ： 对象 . 属性名 = 属性值属性名 ： 对象的属性名不强制要求遵循标识符的规范（但使用时尽量按照标识符的规范去做） 如果要使用特殊的属性名，不能采用 . 的方式来操作。 需要使用另一种方式 ： 语法 ：[ “ 属性名 ” ] = 属性值 读取时也要采取这种方式 使用 [ ] 这种方式操作属性，更加灵活。 在 [ ] 中可以直接传递一个变量，这样变量是多少，就会读取到多少。 2.1.2 读取对象中的属性 —— 语法如下 ：语法 ： 对象 . 属性名 如果读取对象中没有的属性，不会报错而是返回 undefined 2.1.3 修改对象中的属性值 —— 语法如下：语法 ： 对象 . 属性名 = 新值属性值 ： JavaScript 对象的属性值，可以是任意的数据类型 甚至可以是一个对象（ object ） 2.1.4 删除对象的属性 —— 语法如下 ：语法 ： delete 对象 . 属性名2.2 in 运算符通过该运算符可以检查一个对象中是否含有指定的属性—— 如果有值则返回 true ，没有则返回 false 语法 ：“ 属性名 ” in 对象 三 、基础数据类型和引用数据类型基本数据类型 — string —- 字符串 — Number —- 数值 — Boolean —- 布尔值 — null —– 空值 — Undefined —- 未定义 引用数据类型 — Object —- 对象 JavaScript 的变量都是保存在栈内存中。 基础数据类型直接在 栈内存 中存储 。 值与值之间相互独立 ，修改一个变量，不会影响另外一个值 对象是保存在 堆内存 中，每创建一个新的对象，就会在堆内存中开辟出一个新空间 而变量保存的是对象的内存地址（对象的引用）。如果两个对象保存的是同一个对象的引用，当其中一个通过变量修改值以后，另外一个也会受到影响其中一个赋值为 null 后 ，将断开与对象的 引用地址 断开链接关系 当比较两个基础数据类型的值时，就是单纯的 值 之间的比较 当比较两个引用数据类型（ Object ）时，它比较的是对象的 内存地址 如果两个对象时一模一样的，但地址不同，它也会返回 false 四 、对象字面量 使用对象字面量创建对象 语法 ： var obj = { } 使用对象字面量，可以在创建时直接指定对象的属性 对象字面量的属性名可以加引号，也可以不加；建议不加 如果使用一些特殊的名字，则必须加引号语法 ：var object = {name : “猪八戒”， age : &quot;29&quot;, sex :&quot;男&quot; }； 属性名和属性值时一组成对的结构 名和值之间使用 ： 链接 多个值之间使用 ， 隔开 如果一个属性之后没有其他属性了，就不用接 ， 五 、对象的方法 对象的属性可以是任何数据类型，也可以是函数 函数也可以称为对象的属性 如果一个函数作为对象的属性保存 那么此时函数就是这个对象的方法 调用这个函数就是调用这个对象的方法 （method） 方法与函数只是名称上面的区别，没有本质上的区别。 var obj = { name : &quot;孙悟空&quot;， age ： “600”， sayName ： function（）{ console.log(obj.name) } } //调用方法 obj.sayName()； 枚举对象中的属性使用 for ... in 语句 /* * 语法 ： * for （var 变量 in 对象）{ * * } */ for(var n in obj){ console.log(n) // obj 中的属性名称 console.log( obj[n] ) //取出 obj 中对应属性名的值 } for … in 语句，对象中有几个属性，循环体就执行几次 每次执行时会将属性名赋值给变量 九 、垃圾回收 程序运行过程中会产生垃圾；这些垃圾积攒过多了以后，会导致程序运行速度过慢。所以必须要有一个垃圾回收的机制，来处理程序运行过程中产生的垃圾。123var obj = new Object();obj = null //这时就产生了无法操作的对象，并且存在在内存中，无法使用 当一个对象没有任何的变量或者属性对它进行引用时，此时将永远无法操作该对象—— 此时这种对象就是个垃圾，这种对象多了以后就会占用大量内存；从而导致程序运行变慢。—— 所以这种垃圾必须进行清理。 在 JavaScript 中拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁！—— 我们不需要也不能进行垃圾回收的操作 我们需要做的只是将不再使用的对象设置为 null 。","path":"2019/09/28/JavaScript基础-4/","date":"09-28","excerpt":"","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://xiao-long.club/tags/JavaScript/"}]},{"title":"JavaScript基础 - 流程控制语句","text":"程序是由一条一条语句构成 语句是按照 自上向下、自左往右 的顺序一条一条执行 在 JavaScript 中可以使用 { } 来为语句进行分组 同一个 { } 中的语句称为 一组语句；要么一起执行，要么都不执行 一个 { } 中的语句称为 代码块 代码块后面就不用写 ； ，为了提高可读性建议写上。 JavaScript 的代码块 ，只具有分组的作用，没有其他作用；代码块内部的内容在外部完全可见。 通过流程控制语句可以控制程序执行流程 使程序可以根据一定的条件来选择执行 语句的分类 条件判断语句 条件分支语句 循环语句 一 、 条件判断语句使用条件判断语句可以在执行某个语句前进行判断如果该条件执行语句，条件不成立则不执行。 JavaScript 判断语句 —— if 语句语法 一 ：if（条件表达式）{ 代码块 } if 语句在执行时，会先对表达式进行判断， 如果表达条件为 true ，则 if 后的代码块执行； 如果表达条件为 false ，则 if 后的代码块不执行； if 语句只能控制紧随其后的语句 如果希望 if 语句可以控制多条语句，可以将这些语句放在 { } 中组成代码块。语法 二 ：if（条件表达式）{ 代码块 }else { 代码块 } if .... else ....语句 当该语句执行时，先对 if 后的条件表达式进行判断； 如果值为 true 执行 if 后的语句； 如果值为 false 执行 else 后的语句。语法 三 ：if（条件表达式）{ 代码块 1 }else if（）{ 代码块 2 }else if（）{ 代码块 3 }else { 代码块 4 } if ... else if ... else 当语句执行时，会从上到下依次对表达式进行求值判断 如果值为 true 则执行当前语句； 如果值为 false 则继续往下判断； 如果所有的条件都不满足，则执行最后的 else 。 该语句中只会有一个代码块被执行，一旦满足一个剩下的代码都不执行。 JavaScript 条件分支语句 —— switch 语句语法 一 ：switch （条件表达式）{ case 表达式 ： 代码块 ； break； case 表达式 ： 代码块 ； break； default ： 代码块 ； break； } 执行流程 在执行时会依次将 case 后表达式的值和 switch 后的条件值 进行全等比较。 如果比较结果为 true ，则从当前 case 开始执行代码块 当前这个 case 后面的所有代码都将执行；必须在代码最后添加一个 break 跳出执行代码块，不继续执行当前 case 之后的代码。 如果比较结果为 false ，则继续比较 如果所有比较都为 false ，则执行 default 之后的代码块 switch 语句和 if 语句在功能实际有重复 ，使用 switch 可以实现 if 的工程 同样 if 也可以实现 switch 的功能。 如果判断 “ 范围 ” 使用___________[ if ] 如果判断 “ 具体的值 ” 使用___________[ switch ] 二 、 循环语句循环语句通过循环语句可以反复执行一段代码多次 条件表达式写死 true 的循环，叫做 死循环 该循环不会停止，除非浏览器关闭，死循环在开发中慎用！！！！ 可以使用 break ，来终止循环。 创建循环的步骤 ： 创建一个初始化的变量 在循环中设置一个条件表达式 定义一个更新表达式，每次更新初始化变量 JavaScript 循环语句 —— while 语句语法 一 ：while（条件表达式）{ 代码块 ； } - while 语句执行时 ： 先对条件表达式进行求值判断 ； 如果值为 true ，则执行循环体； 循环体执行结束后，继续对表达式进行判断 如果值为 true ，则继续执行；依此类推。 直到对 条件表达式 求值 为 false 停止循环。JavaScript 循环语句 —— do … while 语句语法 一 ：do { 代码块 ； }while（条件表达式） - while 语句执行时 ： do ... while 语句在执行时，会先执行循环体， 循环体执行完毕后，在对 while 后的条件表达式进行判断， 如果为 true 则继续执行循环体，执行完毕后继续判断以此类推； 如果结果为 false ，则终止循环。 实际上 do ... while 和 while 功能类似，不同的是 while 是先判断后执行， 而 do ... while 是先执行后判断 do ... while 可以保证循环体只是执行一次， 而 while 不能。 JavaScript 循环语句 —— for 语句在 for 循环中，为我们提供给了专门的位置来放三个表达式；&nbsp;&nbsp;&nbsp; 1、初始化表达式&nbsp;&nbsp;&nbsp; 2、条件表达式&nbsp;&nbsp;&nbsp; 3、更新表达式 语法 一 ：for（初始化表达式；条件表达式；更新表达式）{ 代码块 } for循环执行流程： 1、 执行初始化表达式，初始化变量 （初始化表达式只会执行一次） 2、 执行条件表达式，判断是否执行循环 如果为true ，则执行更新表达式 如果为 false ，终止循环 3、 执行更新表达式，更新表达式执行完毕继续执行 条件表达式 for 循环三个部分都可以省略，也可以写在外面 如果 for 循环中不谢任何表达式，只写两个分好； 此时循环是一个死循环会一直执行下去，慎用 ！！！！！ for（ ；；）{ alert（“hello Word”） }1、嵌套的 for 循环****** ****** ****** ****** ****** 通过 for 循环来输出图像这个 for 循环执行几次，图形的高度就是多少它可以用来控制图形的高度 for(var i=0;i&lt;5;i++){ /* 在循环内部在创建一个循环，用来控制图形的宽度 外部 for 循环执行一次，内部 for 执行 5 次 内层循环决定图形宽度，执行几次图形的宽度就是多少 */ for（var j=0 ; j&lt;5 ;j++){ document.write(&quot; * &quot;); } document.write(&quot; &lt;br /&gt; &quot;); }输出如下图形 1 ： * ** *** **** ***** for（var i=0;i&lt;5;i++){ for(var j=0 ; j&lt;i+1;j++){ document.write( &quot;*&quot;) } document.write(&quot;&lt;br /&gt;&quot;) }输出如下图形 2 ： ***** **** *** ** * for（var i=0;i&lt;5;i++){ for(var j=0 ; j &lt; 5 - i ; j++){ document.write( &quot;*&quot;) } document.write(&quot;&lt;br /&gt;&quot;) }打印九九乘法表： for (var i = 1; i &lt; 10; i++) { for (var j = 1; j &lt;= i; j++) { document.write(j + &quot;*&quot; + i + &quot;=&quot; + i * j + &quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;) } document.write(&quot;&lt;br /&gt;&quot;) }2、break 和 continuebreak—关键字 break 可以用来退出 switch 或者 循环语句 break 和 continue 不能用于 if 判断 break 会立即终止离他最近的循环语句 //可以为循环语句创建一个 label 用来标识当前循环语句 label： for(var i=0 ;i&lt;5;i++){ for(var j=0;j&lt;10;j++){ break label; //结束外层循环 } }continue—关键字 continue 跳出当次循环（只跳过一次） continue 默认只会对离他最近的循环起作用 //可以为循环语句创建一个 label 用来标识当前循环语句 for( var i=0 ;i&lt;10 ;i++){ if( i===3){ continue } }3、测试程序的性能 程序执行前 — 开启计时器 &nbsp;&nbsp;&nbsp;&nbsp; //console.time（）&nbsp;&nbsp;&nbsp;&nbsp; 它需要一个字符串作为参数，这个字符串将会作为计数器的标识 测试程序执行完后执行 — 终止计数器 &nbsp;&nbsp;&nbsp;&nbsp; //console.timeEnd（） &nbsp;&nbsp;&nbsp;&nbsp; 它需要一个字符串作为参数，这个字符串将会作为计数器的标识","path":"2019/09/15/JavaScript基础-3/","date":"09-15","excerpt":"","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://xiao-long.club/tags/JavaScript/"}]},{"title":"JavaScript基础 - 运算符","text":"运算符也叫操作符 通过运算符可以对一个或者多个值进行运算，并获得运算结果 比如 ： typeof 就是运算符，可以获得一个值的类型 它会将值的类型以字符串的形式进行返回 number string Boolean undefined object 一、 算数 - 运算符 当对非 Number 类型的值进行运算时，会将这些值转换为 Number 然后在进行运算（除了字符串的相加） 任何值和 NaN 做运算都是 NaN [ + ] 加法 —— 运算符 可以对两个值进行加法运算 ， 并将结果返回 如果两个字符串进行加法运算，则会做字符串拼接 将两个字符串拼接为一个字符串，并返回。 任何值和字符串做加法运算，都会先转化为字符串，然后再和字符串做拼串的操作 可以将任意的数据类型 + 一个 “ ” 即可将其转换为String 这是一种隐式的转换，由浏览器自动完成，实际上它也是调用了 String（） [ — ] 减法 —— 运算符 可以对两个值进行减法运算 ， 并将结果返回 [ * ] 乘法 —— 运算符 可以对两个值进行乘法运算 ， 并将结果返回 [ / ] 除法 —— 运算符可以对两个值进行乘法运算 ， 并将结果返回 任何值做 - * / 运算都会自动转化为 Number 我们可以用这一特点做隐式的类型转换 可以通过为一个值 -0 *1 /1来将其转换为 Number 原理和 Number（）函数一样 ，使用起来简单 [ % ] 去余 —— 运算符 可以进行取 余数 运算 ， 并将结果返回 二、 一元 - 运算符一元运算符，只需要一个操作符 -对于非 Number 类型的值 -它会先将其转换为 Number 再进行运算 （可以利用这一点对其他类型数据使用 + 将其转换为 Number 类型） [ + ] 正号 正号不会对数字产生任何影响 [ - ] 负号 负号可以对数字的符号进行取反 三、 自增和自减 - 运算符2.1 、 自增 通过自增可以使变量在自身的基础上加 1 对于一个变量自增以后，原变量的值也会立即自增 1 自增分为两种： 1234567 无论是 a + + 还是 + + a ，都会立即使原变量的值自增 1 不同的是 a + + 和 + + a 的值不同1. 后++ (a++) * a++的值等于原变量的值 （自增前的值）2. 前++ (++a) * ++a 的值等于原变量自增后的新值 2.2 、 自减 通过自增可以使变量在自身的基础上减少 1 自增分为两种： 1234567 无论是 a - - 还是 - - a ，都会立即使原变量的值自减少 1 不同的是 a - - 和 - - a 的值不同1. 后-- (a--) * a--的值等于原变量的值 （自增前的值）2. 前-- (--a) * --a 的值等于原变量自增后的新值 四、 逻辑 - 运算符JavaScript 提供三种逻辑运算符 1、 [ ! ] 非 [ ! ] 可以用来对一个值进行 非 运算 所谓非运算就是对一个布尔值进行取反操作 true 变 false ；false 变 true 如果对一个值进行两次取反， 它不会有变化 如果对非布尔元素进行取反，则会先将其转换为布尔值，然后在取反 所以我们可以利用该特点将其他数据类型转换为布尔值 可以为任意值取反两次，来将其转换为布尔值， 原理与Boolean（）函数一样 2、 [ &amp;&amp; ] 与 [ &amp;&amp; ] 可以对符号两侧的值进行 与 运算并返回结果 运算规则 两个值中只要有一个值为 false 就返回 false 只有两个值都为 true 才会返回 true JavaScript 中的 “ 或 ” 属于短路的 或 如果第一个直为 false ，则不会处理第二个值 [ &amp;&amp; ] 与 运算：一假全假 对于非布尔值进行 与 运算时 会先将其转换成布尔值，然后在进行运算；并且返回原值 如果第一个直为 true ，则必然返回第二个值；（返回原值） 如果两个值中有 false 则会直接返回第一个值；（返回原值） 1、 [ || ] 或 [ || ] 可以对符号两侧的值进行 与 运算并返回结果 运算规则 两个值中只要有一个值为 true 就返回 true 只有两个值都为 false 才会返回 false JavaScript 中的 “ 与 ” 属于短路的 与 如果第一个直为 true ，则不会处理第二个值 [ || ] 与 运算：一真全真 对于非布尔值进行 或 运算时 会先将其转换成布尔值，然后在进行运算；并且返回原值 如果第一个直为 true ，则会直接返回第一个值；（返回原值） 如果第一个值中有 false 则会直接返回第二个值；（返回原值） 五、 赋值 - 运算符1、 [ = ] 等于 可以将符号右侧的值 赋值 给符号左侧的变量 2、 [ += ] 加等于 a += 5 等价于 a = a + 5 3、 [ -= ] 加等于 a -= 5 等价于 a = a - 5 4、 [*= ] 加等于 a *= 5 等价于 a = a * 5 5、 [ /= ] 加等于 a /= 5 等价于 a = a / 5 6、 [ %= ] 加等于 a %= 5 等价于 a = a % 5 六、 关系 - 运算符 通过关系运算符可以比较两个值之间的大小关系 如果关系成立会返回 true ，不成立返回 false 1、 [ &gt; ] 大于号 判断符号左侧的值是否大于右侧 如果关系成立，返回 true ，不成立返回 false 2、 [ &gt;= ] 大于等于号 判断符号左侧的值是否 大于 或者 等于 右侧 如果关系成立，返回 true ，不成立返回 false 3、 [ &lt; ] 小于号 判断符号左侧的值是否小于右侧 如果关系成立，返回 true ，不成立返回 false 4、 [ &lt;= ] 大于等于号 判断符号左侧的值是否 小于 或者 等于 右侧 如果关系成立，返回 true ，不成立返回 false 5、 非数值类型的情况 对于非数字类型比较前 ， 先将其转化为 Number 类型 如果比较符两侧都是字符串，不会将其转换为 Number ，而是分别比较字符编码 比较字符编码时，一位一位进行比较 如果两位一样，则比较下一位 可以借用它来对英文进行排序 比较中文没有意义 比较两个字符串类型的数字 ， 可能会得到不可预期的结果 注意！！！在比较字符串类型的数字时，一定！ 一定！ 一定！ 要转型 任何值和NaN做任何比较都是false 七、 相等 - 运算符 相等运算符用来比较两个值是否相等， 如果相等返回 true ，不相等返回 false 1、 [ == ] 相等 使用 [ == ] 来做相等运算时 如果值的类型不相同 ，则会自动进行隐式转换 ， 将其转换为相同类型，然后在进行比较（转换不可控） NaN 不和任何值相等，包括本身 可以通过 isNaN() 函数来判断一个值是不是 NaN 如果该值是 NaN 返回 true ， 否则返回 false ； 2、 [ != ] 不相等 不相等用来判断两个值是否不相等 ，如果不相等返回 true ；否则返回 false ； 使用 [ != ] 来做 不相等运算 不相等也会对变量进行自动的类型转换，如果转换后相等也会返回 false ； 3、 [ === ] 全相等 用来判断两个值是否全等，它和相等类似 ；不同的是它不会自动转换数据类型 如果两个值类型不同，直接返回false ； 4、 [ !== ] 全不相等 用来判断两个值是否不全等，它和不相等类似 ；不同的是它不会自动转换数据类型 如果两个值类型不同，直接返回false ； 八、 条件 - 运算符（三元运算符）1、 语法条件表达式 ？ 语句 1 ：语句 2 ；2、 执行流程条件运算符在执行时 ， 首先对条件表达式进行求值， —如果该值为 true ，则执行语句 1 ；并返回执行结果 —如果该值为 false ，则执行语句 2 ；并返回执行结果 true？alert(“语句 1”)：alert(“语句 2”) var a = 10, b = 30, c=50; a &gt; b？alert(“语句 1”)：alert(“语句 2”) var max = a &gt; b ? a ：b ; console.log( max ); // 30 var max = max &gt; c ? max : c; console.log( max ); // 50 var max = a &gt; b ? (a &gt; c ? a : c) : (b &gt; c ? b:c) ; console.log( max ); // 50九、 运算符优先级 使用 [ , ] 可以分割多个语句 ， 一般可以在声明多个变量时使用 就和数学中一样 ， 在 JavaScript 中运算符也有优先级 在 JavaScript 中有个运算符优先级的表； 表中越靠上优先级越高，优先级越高越优先计算， 如果优先级一样，则从左往右依次计算。 ！！！这个表不需要记忆，如果遇到优先级拿不准的可以使用 （） 来改变优先级 ！！！！","path":"2019/09/14/JavaScript基础-2/","date":"09-14","excerpt":"","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://xiao-long.club/tags/JavaScript/"}]},{"title":"JavaScript基础 - 数据类型及类型转换","text":"一、概述简单数据类型（值类型）： String Number Boolean 特殊数据类型 Null （type of 出来是 Object） Undefined 引用数据类型 Object Array Function 二、数据类型介绍2.1 String（字符串类型） 在 JavaScript 中字符串需要使用单引号/双引号 &quot;&quot; / &#39;&#39; 引起来使用（不可以讲单双引号混合使用） 引号内不能嵌套使用，如：双引号内继续使用双引号 在字符串内可以使用 \\ 反斜杠进行特殊字符转义 ES6 新增模板语法 反引号 在反引号内可以调用变量 123var name = 'Jerry'var str = `hello $&#123;name&#125;`console.log(str) -&gt; hello Jerry 2.2 Number (数值类型)JavaScript 中所有数值都是Number类型，包括整数和浮点（小数） * 可以使用 “语法 ： typeof 变量” 来检查数据类型 typeof只能检查基础数据类型 * 使用 typeof 来检查Infinity 和 NaN 返回的都是Number JS 中可以表示的最大值 Number.MAX_VSLUE * 如果使用的Number的数字超过最大值，输出 Infinity 表示正无穷大 JS 中可以表示的最小值 Number.MIN_VSLUEJS 中整数的运算基本可以保证精确JS 进行浮点数（小数）进行运算可能得到一个不精确的结果 1.3 Boolean（布尔）Boolean 布尔值只有两个 true - 表示“ 真 ” 。 计算机中存值为：1 false - 表示“ 假 ”。 计算机中存值为：0 1.4 Null（空值）Null 类型的值只有一个，就是 null null 专门用来表示一个为空的对象 用 typeof 检查 null 值时，会返回一个object （Bug） 1.5 Undefined（未定义）类型只有一个，就是undefined 当一个变量声明了，但并没有给这个变量赋值 ，它的值就是undefined 用 typeof 检查 undefined 时也会返回一个 undefined 二、类型转换强制类型转换 指讲一个数据类型强制转换为其他数据类型 类型转主要指 将其他数据类型转化为：String/Number/Boolean 2.1 将其他数据类型转化为 String（字符串） 转换方法一 ：调用被转换数据类型的 .toString() 方法 123456var a = 1,2,3; a = a.toString() console.log(typeof a) //打印出来的属性类型就是 string（字符串） * 该方法不会影响到原变量，它会将转换的结果返回 * ！注意 ！：null 和 undefined 这两个值都没有 .toString() 方法 转换方法二 ：调用 String（）函数，并将被转换的数据作为参数传递给函数 对于Number 和 Boolean 实际上就是调用的 .toString()的方法但是对于 null 和 undefined ，就不会调用 .toString()的方法，它会直接将null转换为“null”（字符串null） 123调用String（）函数来进行转化为字符串 var a = 123 String(a) ; 2.2 将其他数据类型转化为 Number（数字） 转换方法一 ：使用Number（）函数 – 字符串 —&gt; 数字 如果是纯数字的字符串，则直接将其转换为数字 如果字符串中有非数字的内容 ， 则会转换为 NaN 如果字符串是个空字符串或者全是空格的字符串，则转为“ 0 ” 纯数字字符串： 123456789101112131415 var a = \"456\" a = Number(a) console.log(typeof a) // 打印类型为 number ```js 含有非数字类型： ```js var a = \"456asd\" a = Number(a) console.log(typeof a) // 打印类型为 NaN ``` 含有非数字类型： ```js var a = \"456asd\" a = Number(a) console.log(typeof a) // 打印类型为 NaN – 布尔 —&gt; 数字 true 转成 ：1 ； false 转出 ： 0 ； – null —&gt; 数字 null 转成 ： 0 ； – undefined —&gt; 数字 1. undefined 转成 ： NaN ； 转换方法二 ：使用函数【parseInt（）—整形】和【parseFloat（）—浮点】 — 这种方式专门用来对付字符串 — parseInt() 把一个字符串转换为一个整数 — parseFloat（）把一个字符串转换为一个浮点数 调用parseInt()函数将 a 转化为Number parseInt()函数可以将一个字符串中有效的整数内容取出来 ,然后转换为Number。1234var a = \"120px\" a = parseInt( a ); console.log(typeof a) // 打印类型为 Number console.log( a ) // 120 调用parseFloat（）函数将 a 转化为Number parseFloat（）和parseInt()类似，不同的是他可以获取到有效的小数 1234var a = \"120.12512px\" a = parseInt( a ); console.log(typeof a) // 打印类型为 Number console.log( a ) // 120.12512 如果对非String使用parseInt（）和parseFloat（），会先将其转换为String ，再进行数据类型的转化 其他进制的数字 在 JS 中，如果需要表示 16 进制的数字，则需要以 0x 开头 ；输出的时候都会转化为十进制 如果需要表示八进制的数字 ， 则需要以 0 开头 ； 如果需要表示二进制的数字 ， 则需要以 ob 开头。（存在不兼容） 123456// 像“ 070 ”这样的字符串，有些浏览器会当做八进制进行解析，有些当做十进制解析 // 可以在parseInt（）中传递第二个参数，来指定数字的 进制类型var a = \"070\" ; a = parseInt( a ， 10); console.log(typeof a) // 打印类型为 Number console.log( a ) // 70 2.3 将其他数据类型转化为 Boolean（布尔） 转换方法一 ：使用Boolean（）函数 – 数字 —&gt; 布尔 除了 0 和 NaN ，其余的全是 true – 字符串 —&gt; 布尔 除了空字符串，其余都是 true – null 和 undefined —&gt; 布尔 null 和 undefined 转换为布尔全是 false – object —&gt; 布尔 Object（对象）转换为布尔全是 true 三、栈区与堆区 值类型存放在栈区 复杂数据类型存放在堆区，栈中存堆的地址","path":"2019/09/13/JavaScript基础-1/","date":"09-13","excerpt":"","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://xiao-long.club/tags/JavaScript/"}]}]}